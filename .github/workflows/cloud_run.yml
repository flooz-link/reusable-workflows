name: Cloud Run Deployment Workflow

on:
  workflow_call:
    inputs:
      SERVICE:
        required: true
        type: string
      REGION:
        required: false
        type: string
        default: us-central1
      ENV:
        required: true
        type: string
      WORK_DIR:
        required: true
        type: string
      PARENT_DIR:
        required: false
        type: string
        default: ''
      CONCURRENCY:
        required: false
        type: number
        default: 30
      CPU:
        required: false
        type: number
        default: 2
      MEM:
        required: false
        type: string
        default: 1Gi
      INGRESS_RULE:
        required: false
        type: string
        default: ""
      CUSTOM_FLAGS:
        required: false
        type: string
        default: ""
      MAX_INSTANCES:
        required: false
        type: number
        default: 200
      MIN_INSTANCES:
        required: false
        type: number
        default: 0
      CONTAINER_ARGS:
        required: false
        type: string
        description: additional env vars you want to pass to the container
      NO_TRAFFIC:
        required: false
        type: boolean
        default: false
        description: if true, creates a revision on cloud run without routing traffic to it, tags it as release candidate
      VPC_CONNECTOR:
        required: false
        type: boolean
        default: false
      DOCKER_FILE:
        required: false
        type: string
        description: Path to the docker --filter
        default: Dockerfile ../
      ARTIFACT_NAME:
        required: false
        type: string
        description: The name of a GitHub artifact generated in a previous step of the build
        default: 'SKIP'
      ARTIFACT_DIR_PATH:
        required: false
        type: string
        description: The path to save the file to
        default: ''
      TIMEOUT:
        required: false
        type: number
        description: The timeout for the Cloud Run service
        default: 300

    secrets:
      SA_CREDENTIALS:
        required: true
        description: The Service Account that will be used to perform changes on GCP
      PROJECT_ID:
        required: true
        description: The GCP project ID
      SA_RUNTIME:
        required: false
        description: The runtime service account to use for the Cloud Run service
      ROOT_GITHUB_TOKEN:
        required: false
        description: Use the GITHUB_TOKEN get the root project 

    outputs:
      url: 
        description: The URL of this specific Cloud Run revision
        value: ${{ jobs.deploy-cloud-run-service.outputs.url }}

jobs:
  deploy-cloud-run-service:
    defaults:
      run:
        working-directory: ${{inputs.WORK_DIR}}
    name: Deploying ${{inputs.SERVICE}}
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.SA_CREDENTIALS }}'
          create_credentials_file: true
          export_environment_variables: true
      
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Fix env vars
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Download Artifact
        uses: actions/download-artifact@v4.1.7
        if: inputs.ARTIFACT_NAME != 'SKIP'
        with:
          name: ${{ inputs.ARTIFACT_NAME }}
          path: ${{ inputs.ARTIFACT_DIR_PATH }}

      - name: Set NPM_TOKEN environment variable
        id: set-npm-token
        run: |
          if [ -n "${{ secrets.ROOT_GITHUB_TOKEN }}" ]; then
            echo "NPM_TOKEN=${{ secrets.ROOT_GITHUB_TOKEN }}" >> $GITHUB_ENV
          else
            echo "NPM_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          fi
      - name: Setup .npmrc file
        run: |
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" > .npmrc
          echo "@flooz-link:registry=https://npm.pkg.github.com" >> .npmrc

      - name: Setup .npmrc file for parent
        if: inputs.PARENT_DIR != ''
        run: |
          cp .npmrc ${{ inputs.PARENT_DIR }}/.npmrc

      - name: Build Container
        run: |-
          docker build -t ${{ inputs.REGION }}.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.PROJECT_ID }}-cloud-run-docker-${{ inputs.ENV }}/${{ inputs.SERVICE }}:${{ github.sha }} -f ${{ inputs.DOCKER_FILE }} --build-arg ENV=${{ inputs.ENV }} --build-arg GIT_VERSION=${SHORT_SHA}
          docker push ${{ inputs.REGION }}.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.PROJECT_ID }}-cloud-run-docker-${{ inputs.ENV }}/${{ inputs.SERVICE }}:${{ github.sha }}
        continue-on-error: true 

      - name: Handle failure of main_task
        if: ${{ failure() }} # This step runs only if any previous step in the job failed
        run: |
          echo "::error::The Google Artifact Registry task failed! Performing recovery actions... with Container Registry."
          docker build -t gcr.io/${{ secrets.PROJECT_ID }}/${{ inputs.SERVICE }}:${{ github.sha }} -f ${{ inputs.DOCKER_FILE }} --build-arg ENV=${{ inputs.ENV }} --build-arg GIT_VERSION=${SHORT_SHA}
          docker push gcr.io/${{ secrets.PROJECT_ID }}/${{ inputs.SERVICE }}:${{ github.sha }}





      - name: Create Flag Str
        if: ${{ success() }}
        id: flags
        run: |-
          defaultFlags=$(echo "--cpu=${{ inputs.CPU }} --memory=${{ inputs.MEM }} --execution-environment gen1 --concurrency=${{ inputs.CONCURRENCY }} --max-instances=${{ inputs.MAX_INSTANCES }} --min-instances=${{ inputs.MIN_INSTANCES}}")
          
          if [[ ${{ inputs.NO_TRAFFIC }} = true ]]; then
            defaultFlags=$(echo "$defaultFlags --tag rc-candidate --no-traffic")
          fi

          if [[ ${{ inputs.VPC_CONNECTOR }} = true ]]; then
            emptyResponse=$(echo "[]")
            connectorListResult=$(gcloud compute networks vpc-access connectors list --region=${{ inputs.REGION }} --filter="projects/${{ secrets.PROJECT_ID }}/locations/${{ inputs.REGION }}/connectors/${{ secrets.PROJECT_ID }}-vpc" --format=json)
            if [ $connectorListResult == $emptyResponse ]; then
              gcloud compute networks vpc-access connectors create ${{ secrets.PROJECT_ID }}-vpc \
                --network default \
                --region ${{ inputs.REGION }} \
                --range 10.8.0.0/28
            fi

            defaultFlags=$(echo "$defaultFlags" --vpc-connector=${{ secrets.PROJECT_ID }}-vpc)
          fi

          if [[ ! -z "${{ secrets.SA_RUNTIME }}" ]]; then
            defaultFlags=$(echo "$defaultFlags --service-account=${{ secrets.SA_RUNTIME }}")
          fi

          if [[ "${{ inputs.TIMEOUT }}" -gt 300 ]]; then
            defaultFlags=$(echo "$defaultFlags --timeout=${{ inputs.TIMEOUT }}")
          fi

          echo "::set-output name=flags::$(echo $defaultFlags ${{ inputs.INGRESS_RULE }} ${{ inputs.CUSTOM_FLAGS }})"

      - name: Deploy to Cloud Run
        if: ${{ success() }}
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ inputs.SERVICE }}
          image: gcr.io/${{ secrets.PROJECT_ID }}/${{ inputs.SERVICE }}:${{ github.sha }}
          region: ${{ inputs.REGION }}
          gcloud_component: 'beta'
          flags: '${{steps.flags.outputs.flags}}'
          env_vars: |
            SERVICE = ${{ inputs.SERVICE }}
            PROJECT_ID = ${{ secrets.PROJECT_ID }}
            GIT_VERSION = ${{ github.sha }}
            REGION = ${{ inputs.REGION }}
            ${{ inputs.CONTAINER_ARGS }}

      - name: Show Output
        if: ${{ success() }}
        run: |-
          echo ${{ steps.deploy.outputs.url }}
          echo "::set-output url=echo ${{ steps.deploy.outputs.url }}"