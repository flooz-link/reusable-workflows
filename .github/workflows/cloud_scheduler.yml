
name: Cloud scheduler Workflow

on:
  workflow_call:
    inputs:
      ENDPOINT:
        required: true
        type: string
      SERVICE:
        required: true
        type: string
      ENV: 
        required: true
        type: string
      CRON:
        required: true
        type: string
      REGION:
        required: false
        type: string
        default: us-central1
      METHOD:
        required: false
        type: string
        default: GET
      HEADERS:
        required: false
        type: string
      JOB_NAME:
        required: true
        type: string
        description: "Unique name to identify this particular job"

    secrets:
      SA_CREDENTIALS:
        required: true
        description: The Service Account that will be used to perform changes on GCP
      PROJECT_ID:
        required: true
        description: The GCP project ID


      
    

jobs:
  deploy-cloud-run-service:
    runs-on: ubuntu-latest
    steps:
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.SA_CREDENTIALS }}'
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create ${{ inputs.SERVICE }} ${{ inputs.ENV }} ${{ inputs.JOB_NAME }} Cloud Scheduling
        run: |-
          endpoint=$(echo ${{ inputs.ENDPOINT }})
          emptyResponse=$(echo "[]")
          output=$(gcloud scheduler jobs list --format=json --location=${{ inputs.REGION }} --filter=name="projects/${{ secrets.PROJECT_ID }}/locations/${{ inputs.REGION }}/jobs/${{ inputs.SERVICE }}-${{ inputs.ENV }}-${{ inputs.JOB_NAME }}-job")
          if [ $output == $emptyResponse ]; then  
              echo "Creating new Cloud Schedule"
              headers_flag=""
              if [ -n "${{ inputs.HEADERS }}" ]; then
                  headers_flag="--headers=\"${{ inputs.HEADERS }}\""
              fi
              gcloud scheduler jobs create http ${{ inputs.SERVICE }}-${{ inputs.ENV }}-${{ inputs.JOB_NAME }}-job --schedule "${{ inputs.CRON }}" --uri $endpoint --http-method ${{ inputs.METHOD }} --location=${{ inputs.REGION }} $headers_flag
          else
              echo "Updating existing one"
              headers_flag=""
              headers="${{ inputs.HEADERS }}"
              echo "HEADERS input: '$headers'"
              if [ -n "$headers" ]; then
                  headers_flag="--update-headers=\"$headers\""
              fi
               echo "The header output: $headers_flag"
              gcloud scheduler jobs update http ${{ inputs.SERVICE }}-${{ inputs.ENV }}-${{ inputs.JOB_NAME }}-job --schedule "${{ inputs.CRON }}" --uri $endpoint --http-method ${{ inputs.METHOD }} --location=${{ inputs.REGION }} $headers_flag
          fi