
name: PubSub Push Subscription Workflow

on:
  workflow_call:
    inputs:
      ENDPOINT:
        required: true
        type: string
      SERVICE:
        required: true
        type: string
      ENV: 
        required: true
        type: string
      CRON:
        required: true
        type: string
      REGION:
        required: false
        type: string
        default: us-central1
      JOB_NAME:
        required: true
        type: string
        description: "Unique name to identify this particular job"
      DEADLINE:
        required: false
        type: string
        description: The attempted deadline configuration
        default: ''

    secrets:
      SA_CREDENTIALS:
        required: true
        description: The Service Account that will be used to perform changes on GCP
      PROJECT_ID:
        required: true
        description: The GCP project ID
      
jobs:
  deploy-cloud-run-service:
    runs-on: ubuntu-latest
    steps:
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.SA_CREDENTIALS }}'
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Create ${{ inputs.SERVICE }} ${{ inputs.ENV }} ${{ inputs.JOB_NAME }} Cloud Scheduling
        run: |-
          endpoint=$(echo ${{ inputs.ENDPOINT }}")
          emptyResponse=$(echo "[]")
          output=$(gcloud scheduler jobs list --format=json --location=${{ inputs.REGION }} --filter=name="projects/${{ secrets.PROJECT_ID }}/locations/${{ inputs.REGION }}/jobs/${{ inputs.SERVICE }}-${{ inputs.ENV }}-${{ inputs.JOB_NAME }}-job")
          defaultFlags=$(echo "${{ inputs.SERVICE }}-${{ inputs.ENV }}-${{ inputs.JOB_NAME }}-job --schedule "${{ inputs.CRON }}" --uri $endpoint --http-method GET --location=${{ inputs.REGION }}
            ${{ inputs.SERVICE }}-${{ inputs.ENV }}-${{ inputs.JOB_NAME }}-job --schedule "${{ inputs.CRON }}" --uri $endpoint --http-method GET --location=${{ inputs.REGION }})

          if [[ ! -z "${{ inputs.DEADLINE }}" ]]; then
            defaultFlags=$(echo "$defaultFlags --attempt-deadline=${{ inputs.DEADLINE }}")
          fi

          if [ $output == $emptyResponse ]; then  
              echo "Creating new Cloud Schedule"
              gcloud scheduler jobs create http $defaultFlags
          else
              echo "Updating existing one"
              gcloud scheduler jobs update http $defaultFlags
          fi